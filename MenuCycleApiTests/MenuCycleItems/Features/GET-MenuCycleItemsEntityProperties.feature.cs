// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MenuCycleApiTests_ci.MenuCycleItems.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MenuCycleItemCollections")]
    public partial class MenuCycleItemCollectionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GET-MenuCycleItemsEntityProperties.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MenuCycleItemCollections", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
  #line 5
    testRunner.Given("user can access the MenuService API with userID \'pgreen\' and Org \'Fourth\' content" +
                    "Type \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
     testRunner.When("user issues \'POST\' request against the \'/MenuCycles\' and \'/23/items\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
      testRunner.And("the \'Menu\' with id 14 request contains the following body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
     testRunner.When("user issues \'GET\' request against the \'/MenuCycles\' and \'/23/items\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
      testRunner.And("the request is sent to the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
      testRunner.And("user can get one of the menucycleitemid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
    testRunner.Given("user can access the MenuService API with userID \'pgreen\' and Org \'Fourth\' content" +
                    "Type \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
     testRunner.When("user issues \'PUT\' request against the \'/MenuCycles\' and \'/23/items\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
      testRunner.And("user update single item  with day 8 order 3 menuid 16 mealperiod 4 and recipeid 2" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
      testRunner.And("the request is sent to the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GET-MenuCycleItems collection properites")]
        [NUnit.Framework.CategoryAttribute("MenuCycleItem_Collection")]
        public virtual void GET_MenuCycleItemsCollectionProperites()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET-MenuCycleItems collection properites", new string[] {
                        "MenuCycleItem_Collection"});
#line 20
  this.ScenarioSetup(scenarioInfo);
#line 4
  this.FeatureBackground();
#line 21
    testRunner.Given("user can access the MenuService API with userID \'pgreen\' and Org \'Fourth\' content" +
                    "Type \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
     testRunner.When("user issues \'GET\' request against the \'/MenuCycles\' and \'/23/items\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
      testRunner.And("the request is sent to the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "day",
                        "order",
                        "menuCycleItemType",
                        "menuType",
                        "menuName",
                        "course",
                        "menuId",
                        "mealPeriodId",
                        "mealPeriodName",
                        "recipeId",
                        "recipeName",
                        "cost",
                        "costQuantity",
                        "costUnitOfMeasure"});
            table1.AddRow(new string[] {
                        "8",
                        "3",
                        "1",
                        "0",
                        "Das Rheingold Amphitheatre Bar Pre order",
                        "",
                        "16",
                        "4",
                        "All-day dining",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "8",
                        "3",
                        "0",
                        "0",
                        "",
                        "",
                        "0",
                        "4",
                        "All-day dining",
                        "150",
                        "French 75",
                        "56.83",
                        "1.0",
                        "kg"});
            table1.AddRow(new string[] {
                        "8",
                        "3",
                        "0",
                        "0",
                        "",
                        "",
                        "0",
                        "4",
                        "All-day dining",
                        "248",
                        "Rocket Pesto",
                        "48.45",
                        "1.0",
                        "kg"});
            table1.AddRow(new string[] {
                        "8",
                        "3",
                        "0",
                        "0",
                        "",
                        "",
                        "0",
                        "4",
                        "All-day dining",
                        "255",
                        "Salad Garnish",
                        "5.82",
                        "2.0",
                        "kg"});
            table1.AddRow(new string[] {
                        "8",
                        "3",
                        "0",
                        "0",
                        "",
                        "",
                        "0",
                        "4",
                        "All-day dining",
                        "301",
                        "Tomato juice with celery garnish",
                        "31.89",
                        "4.0",
                        "kg"});
            table1.AddRow(new string[] {
                        "8",
                        "3",
                        "0",
                        "0",
                        "",
                        "",
                        "0",
                        "4",
                        "All-day dining",
                        "2",
                        "_Apple Juice published to diff set",
                        "58.35",
                        "3.0",
                        "kg"});
#line 25
      testRunner.And("the following MenuCycleitem propertie collection is returned", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
