// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MenuCycleApiTests_ci.MenuCycleItems.Features.SellPrices
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetItemSellPrice")]
    public partial class GetItemSellPriceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GET-ItemSellPrice.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetItemSellPrice", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
   testRunner.Given("user can access the MenuService API with userID \'AutomationTestUser1\' and Org \'or" +
                    "ganisationName\' contentType \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
     testRunner.When("user issues \'POST\' request against the \'/MenuCycles\' and \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
    testRunner.And("the \'single\' group \'95\' and \'96\' request sent to server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
      testRunner.And("user should get the last menuCycleId from response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.Given("user can access the MenuService API with userID \'AutomationTestUser1\' and Org \'or" +
                    "ganisationName\' contentType \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
     testRunner.When("user issues \'POST\' request against a menucycle \'/MenuCycles/\' and \'/items\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
      testRunner.And("Item request contains mealpriod 39 and the \'Recipe\' with id 898", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
      testRunner.And("user can get one of the menucycleitemid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.Given("user can access the MenuService API with userID \'AutomationTestUser1\' and Org \'or" +
                    "ganisationName\' contentType \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
     testRunner.When("user issues \'POST\' request against the sellPrices \'/MenuCycles/\' and \'/items/\' an" +
                    "d \'/Sellprices\' added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
      testRunner.And("the request contains SellpriceModel 1 and tariffId 24 and value 10 and Vat 10 qua" +
                    "ntity 23 price 20 minprice 20 maxprice 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
      testRunner.And("the request is sent to the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
    testRunner.Given("user can access the MenuService API with userID \'AutomationTestUser1\' and Org \'or" +
                    "ganisationName\' contentType \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
     testRunner.When("user issues \'POST\' request against the sellPrices \'/MenuCycles/\' and \'/items/\' an" +
                    "d \'/Sellprices\' added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
      testRunner.And("the request contains with SellPriceModel \'FixedPrice\' and tariffId 23 and value 1" +
                    "0 and Vat 10 quantity 23 price 20 minprice 20 maxprice 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
      testRunner.And("the request is sent to the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GET_SellPrices properties actions and links")]
        [NUnit.Framework.CategoryAttribute("ItemSellPrices")]
        public virtual void GET_SellPricesPropertiesActionsAndLinks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET_SellPrices properties actions and links", new string[] {
                        "ItemSellPrices"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 27
    testRunner.Given("user can access the MenuService API with userID \'AutomationTestUser1\' and Org \'or" +
                    "ganisationName\' contentType \'application/vnd.siren+json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
     testRunner.When("user issues \'GET\' request against the sellPrices \'/MenuCycles/\' and \'/items/\' and" +
                    " \'/Sellprices\' added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
      testRunner.And("the request is sent to the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
     testRunner.Then("No errors are returned by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "sellPricesModel",
                        "tariffId",
                        "value",
                        "vat",
                        "quantity",
                        "price",
                        "minimumPrice",
                        "maximumPrice"});
            table1.AddRow(new string[] {
                        "FixedPrice",
                        "23",
                        "10.00",
                        "10.00",
                        "23",
                        "20.00",
                        "20.00",
                        "10.00"});
            table1.AddRow(new string[] {
                        "FixedPrice",
                        "24",
                        "10.00",
                        "10.00",
                        "23",
                        "20.00",
                        "20.00",
                        "10.00"});
#line 31
   testRunner.And("the following itemSellPrice propertie collection is returned", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "class",
                        "rel"});
            table2.AddRow(new string[] {
                        "SellPrice",
                        "rels/menucycle/item/sellprice"});
#line 35
      testRunner.And("the following sellprices entities are returned", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "title",
                        "type"});
            table3.AddRow(new string[] {
                        "GET",
                        "",
                        "application/vnd.siren+json;"});
            table3.AddRow(new string[] {
                        "GET",
                        "Menu Cycle Item",
                        "application/vnd.siren+json;"});
#line 38
    testRunner.And("the follwing links properties are returned", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "href"});
            table4.AddRow(new string[] {
                        "http://ci-menuservice.fourth.com//MenuCycles/{0}/Items/{1}/SellPrices"});
            table4.AddRow(new string[] {
                        "http://ci-menuservice.fourth.com/MenuCycles/{}/Items/{1}"});
#line 43
   testRunner.And("the following \'href\' links returned for sellprices", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "href"});
            table5.AddRow(new string[] {
                        "http://ci-menuservice.fourth.com/MenuCycles/{0}/Items/{1}/SellPrices"});
            table5.AddRow(new string[] {
                        "http://ci-menuservice.fourth.com/MenuCycles/{0}/Items/{1}/SellPrices"});
#line 51
   testRunner.And("the following \'Action href\' links returned for sellprices", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "method",
                        "title",
                        "type",
                        "name"});
            table6.AddRow(new string[] {
                        "POST",
                        "Creates menu cycle item\'s prices",
                        "application/vnd.siren+json;",
                        "CreateSellPrices"});
            table6.AddRow(new string[] {
                        "PUT",
                        "Replaces menu cycle item\'s prices",
                        "application/vnd.siren+json;",
                        "UpdateSellPrices"});
#line 56
  testRunner.And("the following Actions are returned", ((string)(null)), table6, "And ");
#line 60
 testRunner.Given("the executable Menuservice stored procedure \'sp_delete_menucycle_by_customer_id\' " +
                    "with id \'39\' is executed against Staging Database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
